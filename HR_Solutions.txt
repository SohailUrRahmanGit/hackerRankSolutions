func funnyString(s: String) -> String {
    var straightAsciiArray = [Int]()
    var reversedAsciiArray = [Int]()
    var straight = [Int]()
    var reversed = [Int]()
    
 for character in s {
    let asciiValue = Int(character.asciiValue ?? 0)
    straightAsciiArray.append(asciiValue)
}
   reversedAsciiArray =  straightAsciiArray.reversed()
   var i = 0
   while i < straightAsciiArray.count - 1 && i < reversedAsciiArray.count - 1 {
        straight.append(abs(straightAsciiArray[i] - straightAsciiArray[i + 1]))
        reversed.append(abs(reversedAsciiArray[i] - reversedAsciiArray[i + 1]))
        i += 1
    }
    if straight == reversed {
        return "Funny"
    } else {
       return "Not Funny" 
    }
}

print(funnyString(s:"bcxz"))


-------------------------------------------------------------------
func minimumNumber(n: Int, password: String) -> Int {
    let minLength = 6
    var missingCriteria = 0
    var missingLength = 0

    if n < minLength {
        //missingCriteria += 1
        missingLength = minLength - n
        print(missingLength)
    }

    if !password.contains(where: { $0.isNumber }) {
        print("missing a Number")
        missingCriteria += 1
    } 
    
    if !password.contains(where: { $0.isLowercase }) {
        print("missing a lower case")
        missingCriteria += 1
    } 
    if !password.contains(where: { $0.isUppercase }) {
        print("missing a upper case")
        missingCriteria += 1
    } 
    
    if !password.contains(where: { "!@#$%^&*()-+".contains($0) })  {
        print("missing a special character ")
        missingCriteria += 1
    } 
    return max(missingCriteria, missingLength)
}


----------------------------------------------------------------------------
var finalRank  : [Int] = []
var uniqueArray = [Int]()

func equalizeArray(arr: [Int]) -> Int {
    var dictionary = [Int: Int]()
    var valuesArray = [Int]()

 for (_,valueAsKey) in arr.enumerated() {
     if let count = dictionary[valueAsKey] {
       dictionary[valueAsKey] = count + 1
       } else {
         dictionary[valueAsKey] = 1
        }
 }

 if let maxValue = dictionary.values.max() {
 if maxValue == 1 {
    return dictionary.count - 1
 }
 
 if let key = getKey(forValue: maxValue, in: dictionary) {
    print("The key for value  is \(key)")


 for (ket, value) in dictionary where  ket != key {
   print(value)
   valuesArray.append(value)
  }
} 
} 
print(dictionary)
print(valuesArray)
let totalValues = valuesArray.reduce(0, +)
return totalValues
}

func getKey<K, V: Equatable>(forValue value: V, in dictionary: [K: V]) -> K? {
    return dictionary.first { $0.value == value }?.key
}

var arr = [35, 65, 69, 28, 12, 69, 37, 80, 80, 50, 80, 50, 15, 57, 79, 69, 57, 65, 15, 69, 57, 50, 65, 2 ,14, 64, 15, 65, 65 ,5 ,15, 64, 57, 37, 50, 12, 64, 37, 28, 20, 80, 80, 50]

print( equalizeArray(arr: arr))

---------------------------------------------------------

func getRank(scores: [Int]) -> [Int] {
for element in scores {
    if !uniqueArray.contains(element) {
        uniqueArray.append(element)
    }
}
 return uniqueArray
}
------------------------------------------------------------------
func climbingLeaderboard(ranked: [Int], player: [Int]) -> [Int] {
 var rankedArray = ranked

 for (_,value) in player.enumerated() {
     rankedArray.append(value)
     rankedArray.sort(by: >)
     let rankTable  =  getRank(scores: rankedArray)
     if let index = rankTable.firstIndex(of: value) {
     let addedIndex = index + 1
      finalRank.append(addedIndex)
     } 
     uniqueArray.removeAll()
 }
  return finalRank
}


var ranks = climbingLeaderboard(ranked: [100,100,50,40,40,20,10], player: [5,25,50,120])
print(ranks)

------------------------------------------------------------------


func designerPdfViewer(h: [Int], word: String) -> Int {
   let largestAlphabet = 1 
   let wordCount = word.count
   let numbers = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]
   
   let doubledNumbers = numbers.map { h[$0] }

   print(doubledNumbers)
   return wordCount * largestAlphabet
}
print(designerPdfViewer(h: [1,3,1,3,1,4,1,3,2,5,5,5,5,1,1,5,5,1,5,2,5,5,5,5,5,5], word: "torn"))

------------------------------------------------------------------
func libraryFine(d1: Int, m1: Int, y1: Int, d2: Int, m2: Int, y2: Int) -> Int {

     let dateFormatter = DateFormatter()
     dateFormatter.dateFormat = "dd-MM-yyyy"
    var fine = 0

if let bookRentDate = Calendar.current.date(from: DateComponents(year: y1, month: m1, day: d1)) {
if let bookReturnDate = Calendar.current.date(from: DateComponents(year: y2, month: m2, day: d2)) {
        print("Date:", bookRentDate)
         print("Date:",bookReturnDate)
         
         let calendar = Calendar.current
       let components = calendar.dateComponents([.day], from: bookReturnDate, to: bookRentDate)

// Access the difference in days
if let daysDifference = components.day {

print(daysDifference)
        
          var yealate = y1 - y2
        
    if yealate > 0 {
        fine = 10000
    } else if daysDifference > 1 && daysDifference < 365 && daysDifference <= 30 {
        fine = 15 * daysDifference
    } else if  daysDifference < 365 && daysDifference > 30 {
        let noOfMonths = daysDifference / 30 
        let remainingDays = noOfMonths % 30 
        fine = 500 * (m1 - m2)
    }  else { 
        fine = 0
    }
}       
}
} 
    return fine
}
------------------------------------------------------------------



func cutTheSticks(arr: [Int]) -> [Int] {
    var resultArray = [Int]()
    var newArray = arr.sorted(by: <)
    var i = newArray.count
    while i >= 1 {
           guard let minValue = newArray.min() else { return [] }
          // print("The minimum value in the array is: \(minValue)") 
           resultArray.append(newArray.count)
           newArray = newArray.filter { $0 != minValue }
           if newArray.count == 0 { break }
    }

    return resultArray
}
------------------------------------------------------------------

/*
 * Complete the 'repeatedString' function below.
 *
 * The function is expected to return a LONG_INTEGER.
 * The function accepts following parameters:
 *  1. STRING s
 *  2. LONG_INTEGER n
 */

func repeatedString(s: String, n: Int) -> Int {
    let characters: [Character] = Array(s)
    if n == 1 {
        return characters[0] == "a" ? n:0
    } else {
        let aCount = s.filter({ $0 == "a"}).count * Int(n/s.count)
        print(aCount)
        let remainingACount = characters[0..<(n%s.count)].filter({ $0 == "a"}).count
        return aCount + remainingACount
    }
}

-------------------------------------------------------------

func jumpingOnClouds(c: [Int]) -> Int {
  var numberOfJumps = 0
  var zeroCount = 1
  var index = 1
  while(index < c.count) {
    if c[index] == 0 {
      if zeroCount == 2  {
          zeroCount = 0
          numberOfJumps -= 1 
      }
       numberOfJumps += 1 
       zeroCount += 1
    } else {
          zeroCount = 0
      }
      index += 1 
  }
  return numberOfJumps 
}
print(jumpingOnClouds(c: [0,0,0,1,0,0])) //3 jump
print(jumpingOnClouds(c: [0,0,1,0,0,1,0])) //4jump

-------------------------------------------------------------------

func camelcase(s: String) -> Int {
var count = 0   
let characters = Array(s)
for c in characters {
    if c.isUppercase {
        count += 1
    }
}
return count + 1
}

---------------------------------------------------------------------------

func strangeCounter(t: Int) -> Int64 {
    var time = Int64(t)
    var initialValue: Int64 = 3
    
    // Finding the interval within which the given time falls
    while time > initialValue {
        time -= initialValue
        initialValue *= 2
    }
    
    // Calculate the value of the counter at time t
    return initialValue - time + 1
}